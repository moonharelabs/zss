{"version":3,"file":"zss.umd.js","sources":["../zss.ts"],"sourcesContent":["import type {\n    PropertiesFallback,\n    PropertiesHyphenFallback,\n    SimplePseudos,\n} from 'csstype';\n\nexport interface Properties\n    extends PropertiesFallback<string | number, string | number>,\n        PropertiesHyphenFallback<string | number, string | number> {\n    [key: string]:\n        | string\n        | number\n        | (string | number | undefined)[]\n        | Properties\n        | undefined;\n}\nexport type Pseudos = { [P in SimplePseudos]: Properties };\nexport interface Style extends Pseudos {\n    [key: string]: Properties;\n}\n\nlet ssr:string[] = [];\n\nlet insertRule: (rule: string) => number =\n    typeof window == 'object'\n        ? (\n              Object.assign(\n                  document.head.appendChild(document.createElement('style')),\n                  { innerHTMl: ' ' }\n              ).sheet as CSSStyleSheet\n          ).insertRule\n        : (rule: string) => ssr.push(rule);\n\n/**\n * Transforms the input into a className.\n * The multiplication constant 101 is selected to be a prime,\n * as is the initial value of 11.\n * The intermediate and final results are truncated into 32-bit\n * unsigned integers.\n * @param  str\n * @returns string\n */\nlet toHash = (str: string) =>\n    'zs' +\n    Array.from(str).reduce((p, c, i) => (101 * p + c.charCodeAt(0)) >>> 0, 11);\n\n/**\n * Parses the object into css, scoped, blocks\n */\nlet parse = (\n    obj: any,\n    selector?: string,\n    prefixer?: (property: string, value: string) => string\n): string[] => {\n    let outer = '';\n    let blocks: string[] = [];\n    let current = '';\n    let next;\n\n    for (let key in obj) {\n        let val = obj[key];\n\n        // If this is a 'block'\n        if (typeof val == 'object') {\n            next = selector\n                ? // Go over the selector and replace the matching multiple selectors if any\n                  selector.replace(/([^,])+/g, (sel) => {\n                      // Return the current selector with the key matching multiple selectors if any\n                      return key.replace(/([^,])+/g, (k) => {\n                          // If the current `k`(key) has a nested selector replace it\n                          if (/&/.test(k)) return k.replace(/&/g, sel);\n\n                          // If there's a current selector concat it\n                          return sel ? sel + ' ' + k : k;\n                      });\n                  })\n                : key;\n\n            // If these are the `@` rule\n            if (key[0] == '@') {\n                // Handling the `@font-face` where the\n                // block doesn't need the brackets wrapped\n                if (key[1] == 'f') {\n                    blocks = blocks.concat(parse(val, key));\n                } else {\n                    // Regular rule block\n                    blocks.push(\n                        key +\n                            '{' +\n                            parse(val, key[1] == 'k' ? '' : selector).join('') +\n                            '}'\n                    );\n                }\n            } else {\n                // Call the parse for this block\n                blocks = blocks.concat(parse(val, next));\n            }\n        } else {\n            if (key[0] == '@' && key[1] == 'i') {\n                outer = key + ' ' + val + ';';\n            } else {\n                key = key.replace(/[A-Z]/g, '-$&').toLowerCase();\n                // Push the line for this property\n                current += prefixer\n                    ? // We have a prefixer and we need to run this through that\n                      prefixer(key, val)\n                    : // Nope no prefixer just append it\n                      key + ':' + val + ';';\n            }\n        }\n    }\n\n    // If we have properties\n    if (current[0]) {\n        // Standard rule composition\n        next = selector ? selector + '{' + current + '}' : current;\n\n        // Else just push the rule\n        blocks.unshift(outer + next);\n    } else blocks.unshift(outer);\n\n    return blocks;\n};\n\nlet cache: string[] = [];\n\n/**\n * css entry\n */\nfunction css(css: Style, global?: boolean, keyframes?: boolean) {\n    let stringified = JSON.stringify(css);\n    // Get a string representation of the object that is called 'compiled'\n    // Retrieve the className from cache or hash it in place\n    let className = toHash(stringified);\n\n    // If there's no entry for the current className\n    if (cache.indexOf(stringified) == -1) {\n        parse(\n            // For keyframes\n            keyframes ? { ['@keyframes ' + className]: css } : css,\n            global ? '' : '.' + className\n        ).forEach((rule) => insertRule(rule));\n        cache.push(stringified);\n    }\n\n    return className;\n}\n\n/**\n * CSS Global function to declare global styles\n * @type {Function}\n */\nlet glob = (styles: Style) => css(styles, !0);\n\n/**\n * `keyframes` function for defining animations\n * @type {Function}\n */\nlet keyframes = (styles: Style) => css(styles, !1, !0);\n\nexport const exportedForTesting = { ssr, insertRule, parse, cache, toHash };\nexport { css, glob, keyframes };\n"],"names":["ssr","insertRule","window","Object","assign","document","head","appendChild","createElement","innerHTMl","sheet","rule","push","toHash","str","Array","from","reduce","p","c","i","charCodeAt","parse","obj","selector","prefixer","next","outer","blocks","current","val","key","replace","sel","k","test","concat","join","toLowerCase","unshift","cache","css","global","keyframes","stringified","JSON","stringify","className","indexOf","forEach","glob","exportedForTesting","styles"],"mappings":"6NAqBA,IAAIA,EAAe,GAEfC,EACiB,iBAAVC,OAEGC,OAAOC,OACHC,SAASC,KAAKC,YAAYF,SAASG,cAAc,UACjD,CAAEC,UAAW,MACfC,MACJT,WACF,SAACU,UAAiBX,EAAIY,KAAKD,IAWjCE,EAAS,SAACC,SACV,KACAC,MAAMC,KAAKF,GAAKG,OAAO,SAACC,EAAGC,EAAGC,cAAaF,EAAIC,EAAEE,WAAW,KAAQ,GAAG,KAKvEC,EAAQ,SAARA,EACAC,EACAC,EACAC,GAEA,IAGIC,EAHAC,EAAQ,GACRC,EAAmB,GACnBC,EAAU,iBAIV,IAAIC,EAAMP,EAAIQ,GAGI,iBAAPD,GACPJ,EAAOF,EAEDA,EAASQ,QAAQ,WAAY,SAACC,GAE1B,WAAOF,EAAIC,QAAQ,WAAY,SAACE,GAE5B,MAAI,IAAIC,KAAKD,QAAWA,EAAEF,QAAQ,KAAMC,SAGjCA,EAAMA,EAAM,IAAMC,EAAIA,OAGrCH,EAGQ,KAAVA,EAAI,GAGU,KAAVA,EAAI,GACJH,EAASA,EAAOQ,OAAOd,EAAMQ,EAAKC,IAGlCH,EAAOhB,KACHmB,EACI,IACAT,EAAMQ,EAAe,KAAVC,EAAI,GAAY,GAAKP,GAAUa,KAAK,IAC/C,KAKZT,EAASA,EAAOQ,OAAOd,EAAMQ,EAAKJ,KAGxB,KAAVK,EAAI,IAAuB,KAAVA,EAAI,GACrBJ,EAAQI,EAAM,IAAMD,EAAM,KAE1BC,EAAMA,EAAIC,QAAQ,SAAU,OAAOM,cAEnCT,GAAWJ,EAELA,EAASM,EAAKD,GAEdC,EAAM,IAAMD,EAAM,UAhDpC,IAAK,IAAIC,KAAOR,IAAPQ,GA8DT,OAHIH,EAAOW,QALPV,EAAQ,GAKOF,GAHfD,EAAOF,EAAWA,EAAW,IAAMK,EAAU,IAAMA,GAIjCF,GAEfC,GAGPY,EAAkB,GAKtB,SAASC,EAAIA,EAAYC,EAAkBC,GACvC,MAAIC,EAAcC,KAAKC,UAAUL,GAG7BM,EAAYlC,EAAO+B,GAYvB,OATmC,GAA/BJ,EAAMQ,QAAQJ,KACdtB,EAEIqB,UAAe,cAAgBI,GAAYN,KAAQA,EACnDC,EAAS,GAAK,IAAMK,GACtBE,QAAQ,SAACtC,UAASV,EAAWU,KAC/B6B,EAAM5B,KAAKgC,IAGRG,EAOPG,IAQSC,EAAqB,CAAEnD,IAAAA,EAAKC,WAAAA,EAAYqB,MAAAA,EAAOkB,MAAAA,EAAO3B,OAAAA,yCARxD,SAACuC,UAAkBX,EAAIW,GAAQ,gBAM1B,SAACA,UAAkBX,EAAIW,GAAQ,GAAI"}