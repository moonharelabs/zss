{"version":3,"file":"zss.js","sources":["../src/parse.ts","../src/css.ts","../src/hash.ts"],"sourcesContent":["import { Properties, Style } from \"./types\";\r\n\r\n/**\r\n * Parses the object into css, scoped, blocks\r\n */\r\nexport let parse = (obj: any, selector?: string, prefixer?: ((property: string, value: string) => string)) => {\r\n    let outer = '';\r\n    let blocks = '';\r\n    let current = '';\r\n    let next;\r\n\r\n    for (let key in obj) {\r\n        let val = obj[key];\r\n\r\n        // If this is a 'block'\r\n        if (typeof val == 'object') {\r\n            next = selector\r\n                ? // Go over the selector and replace the matching multiple selectors if any\r\n                selector.replace(/([^,])+/g, (sel) => {\r\n                    // Return the current selector with the key matching multiple selectors if any\r\n                    return key.replace(/([^,])+/g, (k) => {\r\n                        // If the current `k`(key) has a nested selector replace it\r\n                        if (/&/.test(k)) return k.replace(/&/g, sel);\r\n\r\n                        // If there's a current selector concat it\r\n                        return sel ? sel + ' ' + k : k;\r\n                    });\r\n                })\r\n                : key;\r\n\r\n            // If these are the `@` rule\r\n            if (key[0] == '@') {\r\n                // Handling the `@font-face` where the\r\n                // block doesn't need the brackets wrapped\r\n                if (key[1] == 'f') {\r\n                    blocks += parse(val, key);\r\n                } else {\r\n                    // Regular rule block\r\n                    blocks += key + '{' + parse(val, key[1] == 'k' ? '' : selector) + '}';\r\n                }\r\n            } else {\r\n                // Call the parse for this block\r\n                blocks += parse(val, next);\r\n            }\r\n        } else {\r\n            if (key[0] == '@' && key[1] == 'i') {\r\n                outer = key + ' ' + val + ';';\r\n            } else {\r\n                key = key.replace(/[A-Z]/g, '-$&').toLowerCase();\r\n                // Push the line for this property\r\n                current += prefixer\r\n                    ? // We have a prefixer and we need to run this through that\r\n                    prefixer(key, val)\r\n                    : // Nope no prefixer just append it\r\n                    key + ':' + val + ';';\r\n            }\r\n        }\r\n    }\r\n\r\n    // If we have properties\r\n    if (current[0]) {\r\n        // Standard rule composition\r\n        next = selector ? selector + '{' + current + '}' : current;\r\n\r\n        // Else just push the rule\r\n        return outer + next + blocks;\r\n    }\r\n\r\n    return outer + blocks;\r\n};","import { toHash } from \"./hash\";\r\nimport { parse } from \"./parse\";\r\nimport { Style } from \"./types\"\r\n\r\nlet style = document.head.appendChild(document.createElement('style'));\r\nstyle.innerHTML = ' '\r\n\r\nlet cache: { [key: string]: string } = {}\r\n\r\n/**\r\n * css entry\r\n */\r\nexport function css(css: Style) {\r\n    // Get a string representation of the object that is called 'compiled'\r\n    // Retrieve the className from cache or hash it in place\r\n    let className = toHash(JSON.stringify(css));\r\n\r\n    // If there's no entry for the current className\r\n    if (!cache[className]) {\r\n        style.innerHTML += parse(css, '.' + className)\r\n    }\r\n    return className\r\n}\r\n","\r\n/**\r\n * Transforms the input into a className.\r\n * The multiplication constant 101 is selected to be a prime,\r\n * as is the initial value of 11.\r\n * The intermediate and final results are truncated into 32-bit\r\n * unsigned integers.\r\n * @param  str\r\n * @returns string\r\n */\r\n export let toHash = (str: string) => 'zs' + Array.from(str).reduce((p, c, i) => (101 * p + c.charCodeAt(0)) >>> 0, 11)\r\n\r\n\r\n"],"names":["parse","obj","selector","prefixer","next","outer","blocks","current","val","key","replace","sel","k","test","toLowerCase","style","document","head","appendChild","createElement","innerHTML","cache","css","str","className","JSON","stringify","Array","from","reduce","p","c","i","charCodeAt"],"mappings":"IAKWA,EAAQ,SAARA,EAASC,EAAUC,EAAmBC,GAC7C,IAGIC,EAHAC,EAAQ,GACRC,EAAS,GACTC,EAAU,iBAIV,IAAIC,EAAMP,EAAIQ,GAGI,iBAAPD,GACPJ,EAAOF,EAEHA,EAASQ,QAAQ,WAAY,SAACC,GAE1B,WAAOF,EAAIC,QAAQ,WAAY,SAACE,GAE5B,MAAI,IAAIC,KAAKD,QAAWA,EAAEF,QAAQ,KAAMC,SAGjCA,EAAMA,EAAM,IAAMC,EAAIA,OAGnCH,EAOEH,GAJM,KAAVG,EAAI,GAGU,KAAVA,EAAI,GACMT,EAAMQ,EAAKC,GAGXA,EAAM,IAAMT,EAAMQ,EAAe,KAAVC,EAAI,GAAY,GAAKP,GAAY,IAI5DF,EAAMQ,EAAKJ,IAGX,KAAVK,EAAI,IAAuB,KAAVA,EAAI,GACrBJ,EAAQI,EAAM,IAAMD,EAAM,KAE1BC,EAAMA,EAAIC,QAAQ,SAAU,OAAOI,cAEnCP,GAAWJ,EAEPA,EAASM,EAAKD,GAEdC,EAAM,IAAMD,EAAM,UA3ClC,IAAK,IAAIC,KAAOR,IAAPQ,GAiDT,OAAIF,EAAQ,GAKDF,GAHPD,EAAOF,EAAWA,EAAW,IAAMK,EAAU,IAAMA,GAG7BD,EAGnBD,EAAQC,GChEfS,EAAQC,SAASC,KAAKC,YAAYF,SAASG,cAAc,UAC7DJ,EAAMK,UAAY,IAElB,IAAIC,EAAmC,wBAKnBC,GAGhB,ICLkBC,EDKdC,GCLcD,EDKKE,KAAKC,UAAUJ,GCLJ,KAAOK,MAAMC,KAAKL,GAAKM,OAAO,SAACC,EAAGC,EAAGC,cAAaF,EAAIC,EAAEE,WAAW,KAAQ,GAAG,KDWhH,OAHKZ,EAAMG,KACPT,EAAMK,WAAapB,EAAMsB,EAAK,IAAME,IAEjCA"}